- name: create ec2 and route53
  hosts: localhost
  connection: local
  vars:
    Subnet_Id: subnet-04f7f3ddfb1d25f99
    Sg_id: sg-017be4d720c29e221
    ami_id: ami-09c813fb71547fc4f
    instance_type: t3.micro
    instances:
    - mysql
    - backend
    - frontend
  tasks:
  - name: instal my sql libraries
    ansible.builtin.pip:
      name: "{{ item }}"
      executable: pip3.9
    loop:
    - boto3
    - botocore
  - name: create ec2 instances
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      # key_name: ansible
      subnet_id: "{{ Subnet_Id }}"
      security_group: "{{ Sg_id }}"
      instance_type: "{{ instance_type }}"
      image_id: "{{ ami_id }}"
    loop: "{{ instances }}"
    register: ec2_info
  # print ec2 result  
  - name: print ec2 info
    ansible.builtin.debug:
      msg: "{{ ec2_info }}"
  # print private ip
  - name: print ec2 private ip
    ansible.builtin.debug:
      msg: "{{ item.item }}: {{ item.instances[0].private_ip_address }}"
    loop: "{{ ec2_info.results }}"

    # - nname : print private ip
    #   ansible.builtin.debug:
    #     msg: "{{ item.instances[0].public_ip_address }}"
    #   loop: "{{ ec2_info.results }}"
  

    # ec2:
    #   key_name: ansible
    #   instance_type: "{{ instance_type }}"
    #   image: "{{ ami_id }}"
    #   wait: yes
    #   region: ap-south-1
    #   group: "{{ Sg_id }}"
    #   count: 1
    #   vpc_subnet_id: "{{ SubnetId }}"
    #   assign_public_ip: yes
    #   instance_tags:
    #     Name: "{{ item }}"
    # with_items: "{{ instances }}"
    # register: ec2

    # - name: create route53 record
    #   amazon.aws.route53:
    #     state: present
    #     zone: "ansible.com."
    #     record: "{{ item }}"
    #     type: A
    #     ttl: 3600
    #     value: "{{ hostvars[item].ec2_instance.public_ip }}"
    #   loop: "{{ instances }}"